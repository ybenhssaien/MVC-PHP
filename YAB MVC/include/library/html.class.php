<?php	class HTML{		private $commonArray=array();		private $REPEAT_BEGIN_SYNTAXE="%%REPEAT_BEGIN_";		private $REPEAT_END_SYNTAXE="%%REPEAT_END_";		private $REPEAT_LIMIT_SYNTAXE="_%%";		function HTML(){$this->init();}		private function init(){			$this->commonArray=array(							"%%INDEX%%"=>Functions::getDefaultURL(),						);		}		public function setCommonArray(array $array=array()){			$this->commonArray=array_merge($this->commonArray,$array);		}		public function getReplacedHTMLBlock($block,$array=array()){			while(list($key,$value)=each($array)){				$block=str_replace($key,$value,$block);			}			return $this->getFilteredText($block);		}		public function getReplacedHTMLBlockByModelObject($model,$block,$array=array()){			do{				$block=$this->getReplacedHTMLBlock($block,$array);			}while($model->isMore());			return $this->getFilteredText($block);		}		public function getReplacedHTMLRepeatedBlockByModelObject($models,$fileURL,$replaceElements=array()){			if(!empty($fileURL))$text=file_get_contents($fileURL);			else $text="";			$textReport=$this->getHTMLRepeatedBlockInArray($text);			if(Functions::isArray($textReport)){				$finalArrayReplacedBlock=$this->getRepteadBlockWithModelObject($models,$replaceElements,$textReport);				$text=$this->replaceRepeatedBlockInOriginText($text,$finalArrayReplacedBlock);			}			return $this->getFilteredText($text);		}		public function getFilteredText($text){			if(Functions::isArray($this->commonArray))				foreach($this->commonArray as $value => $replacedBy){					$text=str_replace($value,$replacedBy,$text);				}			return $text;		}/********************************************************************************/		private function getHTMLRepeatedBlockInArray($text){			$report=array();			$textOrigine=$text;			while($text=strstr($text,$this->REPEAT_BEGIN_SYNTAXE)){				$objectName=substr($text,strpos($text,$this->REPEAT_BEGIN_SYNTAXE)+strlen($this->REPEAT_BEGIN_SYNTAXE));				$objectName=substr($objectName,0,strpos($objectName,$this->REPEAT_LIMIT_SYNTAXE));				/**************************************************************/				$repeatedBlockBegin=$this->REPEAT_BEGIN_SYNTAXE.$objectName.$this->REPEAT_LIMIT_SYNTAXE;				$repeatedBlockEnd=$this->REPEAT_END_SYNTAXE.$objectName.$this->REPEAT_LIMIT_SYNTAXE;				$repeatedBlockBeginPosition=strpos($textOrigine,$repeatedBlockBegin)+strlen($repeatedBlockBegin);				$repeatedBlockEndPosition=strpos($textOrigine,$repeatedBlockEnd);				/**************************************************************/				$repeatedBlock=substr($textOrigine,$repeatedBlockBeginPosition,($repeatedBlockEndPosition-$repeatedBlockBeginPosition));				$report[]=array("objectName"=>strtolower($objectName),"blockText"=>$repeatedBlock);				$text=str_replace($repeatedBlockBegin,"",$text);			}			return $report;		}		private function getRepteadBlockWithModelObject($models,$replaceElements=array(),$repeatedBlockArray=array()){			$blockWithObject="";			$finalArrayReplacedBlock=array();			foreach($repeatedBlockArray as $reportLine){				if(Functions::isArray($models))$object=isset($models[$reportLine["objectName"]])?$models[$reportLine["objectName"]]:null;				else $object=$models;				if($object!=null){					if(Functions::isArray($object))foreach($object as $name => $line)						$finalArrayReplacedBlock[]=$this->executeModelFetch($object,$blockWithObject,$reportLine,$replaceElements);					else						$finalArrayReplacedBlock[]=$this->executeModelFetch($object,$blockWithObject,$reportLine,$replaceElements);				}			}			return $finalArrayReplacedBlock;		}		private function replaceRepeatedBlockInOriginText($text,$finalArrayReplacedBlock=array()){			foreach($finalArrayReplacedBlock as $lineArray){				$repeatedBlockBegin=$this->REPEAT_BEGIN_SYNTAXE.$lineArray["objectName"].$this->REPEAT_LIMIT_SYNTAXE;				$repeatedBlockEnd=$this->REPEAT_END_SYNTAXE.$lineArray["objectName"].$this->REPEAT_LIMIT_SYNTAXE;				$repeatedBlockBeginPosition=strpos($text,$repeatedBlockBegin);				$repeatedBlockEndPosition=strpos($text,$repeatedBlockEnd)+strlen($repeatedBlockEnd);				/**************************************************************/				$repeatedBlock=substr($text,$repeatedBlockBeginPosition,($repeatedBlockEndPosition-$repeatedBlockBeginPosition));				$text=str_replace($repeatedBlock,$lineArray["blockText"],$text);			}			return $text;		}		private function executeModelFetch($object,$blockWithObject,$reportLine,$replaceElements){			if($object->getcount()>0){				do{					$blockWithObject .= $reportLine["blockText"];					if(function_exists($replaceElements)){						$replaceChars=call_user_func($replaceElements,$object,$reportLine["objectName"]);						foreach($replaceChars as $replacedKey=>$replacedKeyBy){							$blockWithObject = str_replace($replacedKey,$replacedKeyBy,$blockWithObject);						}					}elseif(Functions::isArray($replaceElements)){						foreach($replaceElements[$reportLine["objectName"]] as $replacedKey=>$replacedKeyBy){							$blockWithObject = str_replace($replacedKey,$replacedKeyBy,$blockWithObject);						}					}				}while($object->isMore());				return array("objectName"=>strtoupper($reportLine["objectName"]), "blockText" => $blockWithObject);			}			return array("objectName"=>strtoupper($reportLine["objectName"]), "blockText" => $blockWithObject);		}	}?>